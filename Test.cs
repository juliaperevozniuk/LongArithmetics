using NUnit.Framework;

namespace multidigit_arithmetic.Tests
{

    [TestFixture]
    public class CalcTest
    {

        [Test]
        [Description("Проверка перевода и обратно.")]
        [TestCase("231633E7E518DAB2A9E568EACF103B58E3C37041D5C0DF305562865133D4BE42")]
        [TestCase("9D2A2DBEA6C2FA6E411C6545EDA83F85E7D291CB9D05D391F75C10193E4DEBE0")]
        [TestCase("E2DCCB12716938615DB013626A02BA6F59A71DD6A2891227D5A905ABEE1B6114")]
        [TestCase("F045FF2246421F0C1126C3057E6170398E67B0E5409FF5B61A2C2A7A77AEB792")]
        [TestCase("C8C83F035773E3F8261317D5FC53FB55DEAA7A0C663BD8E2E87B511D2C7B7DD7")]
        [TestCase("948A709342B918FCD81DCDC72DF087D000CF620F4206BDAA1C5FFF1F9BEF375C")]
        public void TestToUlong32AndBack(string hex)
        {
            var num = new BigNum(hex);
            var result = num.ToString();
            Assert.AreEqual(hex, result);
        }


        [Test]
        [Description("Проверка сложения чисел.")]
        [TestCase("2267CC155321A2BBD9D1CFFFC97243C184B7260B515B9604F395CA9062D256D1", "49D23110907AD96A9C66F735854975D3790B104BB12621BE4622793392477CAA", "6C39FD25E39C7C267638C7354EBBB994FDC236570281B7C339B843C3F519D37B")]
        [TestCase("4C24ACDBA2B3FF439F2ACA91B441B8295754FAB6E6A41E927198B6F60F7F431B", "8011E9E4412232A5F89C3DAD0DB10240F052C5DB5F3944CFE06FDA5BA89458DD", "CC3696BFE3D631E997C7083EC1F2BA6A47A7C09245DD636252089151B8139BF8")]
        [TestCase("D15880417B1D0EF42F48ECBAF63D6496E5EB2F97ED1449F50E31DCF584CA0527773F7EEA745CA608012AE309601E31AAE1047F69FFE8FC346116B309CD12DA60", "C594394C40FCAF59865E58351E71F0021F5ADFFC99582794D993B17B189EA1B58546D7C629A97F2CECDA017FAEE903BF0585E80BD717F225A0D1AAB38FDD2636", "196ECB98DBC19BE4DB5A744F014AF549905460F94866C7189E7C58E709D68A6DCFC8656B09E062534EE04E4890F073569E68A6775D700EE5A01E85DBD5CF00096")]
        [TestCase("CD6E33CF1A45DD5530F9C7614294824DA037B737DF0477B86A4D02FE38B6474E50123166226104703154BC58C0308BBB7030D2109B776BA383E4516782F9C8D5", "C8CA9DE0BB0A652518328377A8CA65C2904142CED55A14B8643A1754F906219FF9DC398823A19AA5078A3DECED18E36D7F978701D4FF0AA099E2035ECBBDF2C6", "19638D1AFD550427A492C4AD8EB5EE8103078FA06B45E8C70CE871A5331BC68EE49EE6AEE46029F1538DEFA45AD496F28EFC85912707676441DC654C64EB7BB9B")]
        [TestCase("95F82E379FF48DF05A9FB778E3FC0C08B8F88F17521D2760515548AED0DE61ADD7A570267623EDC172640C6152212CEE3BB65F2BE61D50488ACCE8345816373DDCCD5AC35CDED390B03D9126CE76404CD217BB1D9F4EA85D2EC45DD191CF56B4953983AB28983C4F87DD55C2514896F254CA20E15E37DBFA9248709A13402CA5", "107271F97289CC7CBB0F7CB3ECD9FA9B512A0190418857D29EF7CF5AC9A398D75A48505BC1879C026AACCCDF24EFE1EE897A5D6B396908881CC456A614E9F4C24AD413202851856644BC2FB0B151C5D583AE30098568C8D67116CA029F41E47C025952630F7F91306A3E9A887F076AC35E4DEE902179F97D9337DC2B593E9686", "A66AA031127E5A6D15AF342CD0D606A40A2290A793A57F32F04D18099A81FA8531EDC08237AB89C3DD10D94077110EDCC530BC971F8658D0A7913EDA6D002C0027A16DE3853058F6F4F9C0D77FC8062255C5EB2724B771339FDB27D431113B309792D60E3817CD7FF21BF04AD05001B5B3180F717FB1D57825804CC56C7EC32B")]
        [TestCase("9C42AEE0BC343D44F1D4B5E2B4D58FD00D62356AC27756EB9E86A73970D549F474B7BE6534083080CA8E1C74D7E17DD5CECBE2A815973364C7DC6DB08AEEA7DE5D1414C1E867CEA7578FCE7800E684B5A20458CC942C4C3B381FD527ABDE2F67F6A702634E42FC91E21C697D2CD3B81DF3DE80BB442D6CAB4BC7299779B514A7", "6CA5E93F363C15BA853D6909AEADF86A41502E1424B789880CCE69E79E9EAF74D7168817F03951120905BDB625D8E9802AE495FCDF1D5D5008BD0BD7BCDC0926BED6017DB23CC7DCF47F05D338AD46D80F6F72A1084F5B25AF3454AE7427C99B7B9004FD7CD0C4A218B6B3AE6D69366D205DC7A6FF1C1345BFB6F0B7145FF928", "108E8981FF27052FF77121EEC6383883A4EB2637EE72EE073AB5511210F73F9694BCE467D24418192D393DA2AFDBA6755F9B078A4F4B490B4D099798847CAB1051BEA163F9AA496844C0ED44B3993CB8DB173CB6D9C7BA760E75429D62005F90372370760CB13C133FAD31D2B9A3CEE8B143C486243497FF10B7E1A4E8E150DCF")]
        public void TestAddition(string hex1, string hex2, string h1_plus_h2)
        {
            var a = new BigNum(hex1);
            var b = new BigNum(hex2);
            var calculator = new Operation();
            var result = calculator.Addition(a,b);
            Assert.AreEqual(h1_plus_h2, result.ToString());
        }

        [Test]
        [Description("Проверка сравнения чисел.")]
        [TestCase("2267CC155321A2BBD9D1CFFFC97243C184B7260B515B9604F395CA9062D256D1", "49D23110907AD96A9C66F735854975D3790B104BB12621BE4622793392477CAA", -1)]
        [TestCase("99915D422AF31C7CEDEECAA0F0D18317BE97B8B8F95E11832FC3B5C38BDC8042E4EBE07F3BC4BA580F26C7ED9627E87191A69E89B13FF9DC2EBA6E71D897C03B3CAA1799EC10544D9D67008DF55E78F4612403FC17D5896174FB8F8CA626F0D68A64BCDDFA7666DD75E68E4687504D63509D056D1414B69B5A5238DEFF0CB4EF", "83D69EF297F10C37ADA24CE9DCB924F51E1E370913BD9D2D7ED35DE7A2797C10C2DB7848C921C19E9D9012BB34D3F00561194A80D2787E1D4BCAE14C4872CF1A194380FD68D231128E0BC71897B929F8A6B4FB7439DD88C25C53C81C34F4F547B98DA37F193B798386A5B7DE41DBB308E2B675E19343B0F314B838ED2B4EA0D", 1)]
        [TestCase("5BBBD720F5044161D9B1DA2C60E82961931A73EF51B478D177FA5FF64A260742", "F3FBB52074BCE770F9E9CD924E7AA302733FCDEDDCFF61BC90EE305D49CD9C63", -1)]
        [TestCase("BE51D2EEE5CAC31635B932960DFF3DF58ADC57DF73389AAF1D83B82634237F4F", "500A280439F72AFA70A07E8EC1F89408743E61EADBBE3FEABA5EF7BFF481C9F6", 1)]
        [TestCase("FFA666BC5F3A6855BE625FD68CC44723ACBD6F10B6F801DF9A2C91A2895A417CF25E24680F993B1EE536B78207DECDE0FF1D84815939D4050AD09B243F574FD5", "FFA666BC5F3A6855BE625FD68CC44723ACBD6F10B6F801DF9A2C91A2895A417CF25E24680F993B1EE536B78207DECDE0FF1D84815939D4050AD09B243F574FD5", 0)]
        [TestCase("B09B94A6B77F9AF4A81A5CC91ABD91FE40473580E089E8C2FCD757857377CF113B4B90B9F888BD6FCC89C811AF94E4F6CCEB25CA3805FBF2E800F1CB7396BB73", "D0557399BE1473CC95513C0F78B06641413546A8CD158576F007C307F7E6FB403294306E78F403BE7CD54C7B4A3A3B2A411EDAEB5369F823F2082BA61AFBC1F2", -1)]
        public void TestCompare(string hex1, string hex2, int num)
        {
            var a = new BigNum(hex1);
            var b = new BigNum(hex2);
            var calculator = new Operation();
            var result = calculator.Compare(a, b);
            Assert.AreEqual(num, result);
        }



        [Test]
        [Description("Проверка вычетания чисел.")]
        [TestCase("C40D0317D8B4996A94AA86AF943F72348C336186B1538CC789021A056FA041FB", "44AC0B2B2D3CA0C2FFFF172876C2B1EB1FFFF76D64A9968520B75263A3F026A8", "7F60F7ECAB77F8A794AB6F871D7CC0496C336A194CA9F642684AC7A1CBB01B53")]
        [TestCase("493E79B75782CC1E27C38899EC2DF62CFA7DF4B7A796ABD6D69224D926363E5A", "BC92FD250EFC4E92E63FB65A6B9FE3F86B1DA82366EB180EF7E26841FAA1C436", "0")]
        [TestCase("53F2D43AC5B058E83BFCDFAB50A2DDADCF9A7340EB7C34B3C3C831CCC0523054649B9F155B4B07C24F40705695E040FDAE3F1FF008AC92DD34697D7A788C295C", "1C8F03F6F49C9D2678000A49A20F4BA17CE211D8F66D4B2A65DBBD351F577F5CFAEB30486F02A4BDC8AB8241717D6A1A17B363A16078EA39955E5E82F09A01C7", "3763D043D113BBC1C3FCD561AE93920C52B86167F50EE9895DEC7497A0FAB0F769B06ECCEC4863048694EE152462D6E3968BBC4EA833A8A39F0B1EF787F22795")]
        [TestCase("B808E9D67E32C0B8E6D634B7479DC851D0166A4292A7093D0F373562E5BC88BF586C69119951A2FB661444C57713B129D48D7C4A4CF4E4582D708CC7CC8D941F", "CC814DB98A1DACF1A3670E9855EF1F47889075A15CA73FE2E3BF98DB392681EE4ADB41AFA74C5A442D08303D51CF2886EA0683328873A537EF816DE016E97C67", "0")]
        [TestCase("5C7E4789E473A6B685BFAECE6A162DE08024CBAECE0FC6D9A8FA83E8622D26E527D4E45B3F369553E80B78548264FD40690B43E9813AA3120A6C1BBDB2F032EABF921E0993E5F4B0D6C922E76FAC2420DEBD41A905E14788CB60B8D75383A796DABD92E28B35FD62317F360CFC35F3692182B65D960FDFFDAFFF9E63F50DE6B0", "40CDCCD2029340E2B9D08A9B0CA0035392003A5C96D62EF4F6388D1D024CC98AC03957BCFE4B1AAF8D4C54F42C13ECD84C97FA821E70A04F28E850C21B42FDBC9B06FD326BFAB0143BF02F10B38F180267F90F9AFFD60CBE3EA561F9891C05060D08F3323E5358B54FF9AB9B5946D350B4DE81CD39C06D92B6EA5E6156EA0BF9", "1BB07AB7E1E065D3CBEF24335D762A8CEE249152373997E4B2C1F6CB5FE05D5A679B8C9E40EB7AA45ABF2360565110681C73496762CA02C2E183CAFB97AD352E248B20D727EB449C9AD8F3D6BC1D0C1E76C4320E060B3ACA8CBB56DDCA67A290CDB49FB04CE2A4ACE1858A71A2EF20186CA434905C4F726AF91540029E23DAB7")]
        [TestCase("B7E1ED8E6022B9533542D7C2BD6F2AA43327FC66CA8502D0816373A42CAC7A898C5FDF2DE7354F2100DF54E310FE26314E5CA41053B720E0DEB99EDC39EF6252024D6A007BA9FBDB91C4460A70285F4DA60ABE8475A6547E4F02B9AB850FD0E73A699217A68F89584256C9AA91645C91D8333D2FB835325F3BE8A8E0126DC913", "541ED0BA725A3098E6F00C69948CE8C89B8CFE0D3FB6550A38468ECF33FEB17C174DCFB09CB7B69F3B33D39241C08D57B30AEF36A0C45F6372860A7657AD80C7FE2E15E75C534A917953AC1818FC28C598509BD27DC756E543BC5978A0AF2D0F1B682DB8FC1F4370AA4901C2EB68D2C7DBD9E45162157A8E9EA5BAB3CE3C5204", "63C31CD3EDC888BA4E52CB5928E241DB979AFE598ACEADC6491CE4D4F8ADC90D75120F7D4A7D9881C5AB8150CF3D98D99B51B4D9B2F2C17D6C339465E241E18A041F54191F56B14A187099F2572C36880DBA22B1F7DEFD990B466032E460A3D81F01645EAA7045E7980DC7E7A5FB89C9FC5958DE561FB7D09D42EE2C4431770F")]
        public void TestSubstraction(string hex1, string hex2, string h1_minus_h2)
        {
            var a = new BigNum(hex1);
            var b = new BigNum(hex2);
            var calculator = new Operation();
            var result = calculator.Substraction(a, b);
            Assert.AreEqual(h1_minus_h2, result.ToString());
        }

        [Test]
        [Description("Проверка вычетания чисел.")]
        [TestCase("B409C19D331A751DE032A84AA37B2DA0B7D704F3CCF822CF771A770AA1EE6D76", "7D86BE085F2B8B9D1FA4E3993C257922BADC093C1F25C82808C4910EAEB158DD", "5847864A3B2BA28CC7978FD7171E90D05E1F84F09FB2A0C31B552614F1E645789C132B1CCD7541DBB5D4D17218BCDA758E78DE7AFB78F4F4D890428BA30B0EDE")]
        [TestCase("BD9108AA5B98FB04AAC44D024A7572AC327B708D0339A87DF1BCEC10306AED11", "B3B0D8C85428A3BEC601B8CBFACD18D8FF09EE7F3536D4A4EAF8D32A751CC66C", "850F5D4BCA1B21D3576190ABCF914758C9716DD7D59E0444EF5EAA534A8E7DECC2E0303FAF8B3119C49882002DD8592D1553F788E4CEF06297962E1BD353292C")]
        [TestCase("65E614F5959344CE15C02DBAA8C6647371757353CC7CCD12222983149FDE2D41", "E7A39FFCED598C54DBAC51465895960B63F2D07ABDA118C5AE2D93F3A46C834C", "5C33BE178650EFC0B8CBED259E37BB526A306017B35BA0CBC98CB088DFBAA3C924E3CD8216F1E9538D5509AB60814E20BA3061BC5393768F5BD28659E289B24C")]
        [TestCase("329766C23B8E625A3DDEF2BB3ED27ADF8212AC30291B55E69A5BB73C954E6BEB103DDA802AECC81D0353FD63EA583FCE347F60352B0EFF4F6355A2F904F39A52", "39E69EEC4320A5A1763C131C1BEA894F80D425CDA13CFB3BFD9776986074EAF4CE3FB09F95D068C683CAA99F2AD49C9623AFBA291F7A34F2CE44457458BD993", "B71494FB406E530687EC66EF3A54D9CCFAFFA521FDDFFB4F8DECB36AB06BC37F0C236DF2A2B495826233CF995D37A43D82DD9B3E3A50721F187F325C63BDC174AABC90C809D1CAFC81ACC8926039BCD41C9928EEE2956D1748A2A33458D9DCFA995789BEE827EE8E15E0E6757FE78322296EF7E37B8EF129AC3CEB3A371F16")]
        [TestCase("8D9AF16DE72AA94D17C74DB6BE0F38A8FF519024B4381A0155DC75F757D2D0A60E8E6AB2C14360021E35B69E2F2FA0313E1F616A45C455E43A1A37B9FFB09EC3", "D55E456D5BD08644B4063BDD408D1F106B2E670B32F8CB935E9E1EB29B11FA79922160E843311F52BFF902B20D3C5D602411B0B589B7D1E795C1C8C4B157B857", "7606102C5886379C9177759D264E3F530BCCD8F77B971D2882A735F3034E66BEDEE523FA5B201EB41A444260F21FDEAEEA0AA01AFBC3CCEF163A6FFB5980AE765F83C2268B6CBBE5088DE7362978BEE81436E6CBD0C1E1ECB5DEFB444E22E6BFE77594B1C4FE96B2407FFFF10728FBB20541D15ECF3A1971103A88139E671C45")]
        [TestCase("2A009F0E8234F3566A1FB225B5818C6E07331CEE894FA077134CB77C40961C75A8D5C6F33E0DE8BAF4CB1C4611A92FC8D704DC3B2840EF24DF98A783D7102950F1DA6475C39D13E1387A268A9F009715E0CBA9A2C04E1155EFD785BCC0CBF4E94DD5A8A8F6346BA54835F725F06139602C59276C066862D91BD6BB2252B4DE3E", "141AC6BB537BA5B81FBE2E5349970977DFDA59DEB571C3B0A17421B3461B46E55E95D60A12DA25BC8D36DB1C115652F9FD55E24A09078446FC6DAE35BC6F1D719EC814C59E2176E1F6EB09CA63851B5D9BF15F239921D34372D03464F36CBC52108E0AB9256076CC7A9BAD388FAD7A6267FFAB06379CD20D2944A19E40BBF375", "34C711880D141C0444F85594E29E5B29BB9B335C1877ADE883D5E7727C4D2AFFC6D0D201BEA3A314EBBE0E5FA4CA8D7A80F3227F38071988033E3052E3469793F8D36477EC1DBC8A8AC4C5AF1DA73F98AD35DE13B6BF352087CCFBCB6EE29BF3808F575809548EF3A1072492F9B7E603EDA112ACEF27EDDC0C006D88326A1DAE09BDBC8BF8025B138EF2A8351851D7E9E96E87BF440EB3DD8143DE59D991BECAEFB4300CC19764CCA329A5DCEB07C4864CE81B14EBF6136B130A76EE2E4536C7B8CA1830E1E13E879921417828129F630538CBA6AC89A5B4AFCD82E33FBC209E98C299616C3BCC4C0E1A9101FFD30925EF134EF3EF171459562E52352E86C56")]
        public void TestMultiplication(string hex1, string hex2, string h1_mul_h2)
        {
            var a = new BigNum(hex1);
            var b = new BigNum(hex2);
            var calculator = new Operation();
            BigNum result = calculator.Multiplication(a, b);
            Assert.AreEqual(h1_mul_h2, result.ToString());
        }


        [Test]
        [Description("Корректность битового сдвига влево.")]
        [TestCase("ABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEF0000000000000000000000", 328, "ABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEF00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
        [TestCase("2", 0, "2")]
        [TestCase("2", 0, "2")]
        [TestCase("1", 1, "2")]
        [TestCase("1", 2, "4")]
        [TestCase("F", 4, "F0")]
        [TestCase("0000000000000000FFFFFFFFFFFFFFFF", 32, "FFFFFFFFFFFFFFFF00000000")]
        [TestCase("0000000000000000FFFFFFFFFFFFFFFF", 64, "FFFFFFFFFFFFFFFF0000000000000000")]
        [TestCase("0000000000000000FFFFFFFFFFFFFFFF", 1, "1FFFFFFFFFFFFFFFE")]
        [TestCase("0000000000000000FFFFFFFFFFFFFFFF", 4, "FFFFFFFFFFFFFFFF0")]
        [TestCase("0000000000000000FFFFFFFFFFFFFFFF", 64, "FFFFFFFFFFFFFFFF0000000000000000")]
        [TestCase("0000000000000000FFFFFFFFFFFFFFFF", 63, "7FFFFFFFFFFFFFFF8000000000000000")]
        [TestCase("00000000000000000000000000000000FFFFFFFFFFFFFFFF", 128, "FFFFFFFFFFFFFFFF00000000000000000000000000000000")]
        public void TestShiftBitsToHigh(string hex1, int shift, string hex2)
        {
            var a = new BigNum(hex1);
            var b = new BigNum(hex2);
            Operation calculator = new Operation();
            var c = calculator.ShiftBitsToHigh(a, shift);
            Assert.AreEqual(hex2, c.ToString());
        }


        [Test]
        [Description("Функция поиска битовой длины работае правильно.")]
        [TestCase("0000000000000000000000000000000000000000000000000000000000000000002AAAA", 18)]
        [TestCase("00000000000000000000000000000000000000000000000000000000000000000010", 5)]
        [TestCase("ABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEF0000000000000000000000", 328)]
        [TestCase("1", 1)]
        [TestCase("AAAFFFFAAABBBB121231997BBBBA", 112)]
        [TestCase("0", 0)]
        public void TestBitLength(string hex, int len)
        {
            var a = new BigNum(hex);
            var calculator = new Operation();
            Assert.AreEqual(len, calculator.Bitlen(a));
        }


        [Test]
        [Description("Деление работает правильно.")]
        [TestCase("3AC9EC8A7D3A554C1E9094A1854ACB0E2B7CBDDE59C2ADA018173C98BF4DFB1BD8D5DCCFD5BDFA9E91C8839958684D7121B4DA8863925E77EA0A27A28867B6CE",
                   "A320855784D35118ABBDA9116A2D52B9CF76C5C69427AED4F3ADD63FC3B6CC36",
                   "5C42488F9D580BBA73B6AB5FAEAB251C023E016259A48D44B1947A3837BA0E29",
                   "5C42488F9D580BBA73B6AB5FAEAB251C023E016259A48D44B1947A3837BA0E28")]
        [TestCase("101A3F04E4BB34DD41FE0893D0FCF341776CFF41016BB753DBF23B5D6FEBF156B5CE6C511D5E54876559CF6A0BC3CDB93CE883331CE1349F604D789C440E1FBA",
                   "62CFC9B03F18DEB0667A9F46DEA1D1D10AB9720ED7379F544B8C5DC67211EF89",
                   "29B7DCAFF9696345732544724E3C71710551355E18CB3405AF5917CFF3B0F890",
                   "AAA234924090000BAAAAA")]
        [TestCase("53BB3435ACA67DB929F9A681DF91D2CDE3C331E4BFC3B3448B9ECCFEC32F48D4E5C1AD03037D12ECC1588D50E806A962F499CBB712ED9A9740920C41B729E509",
                   "EB1F5EE9866D9FD3DFDD5561CC8BBF20888DB2A2386F6A96948603034689548C",
                   "5B2A852FAEBBB481701FFADF5A8E3AF9DBD8AB896BE19478DCE21CBAC8D903F7",
                   "BBB481701FFADF5")]
        [TestCase("D7FEF8197C133E4A8C68D83AD62AA5B7920CAADA41947129763ADC58C8E99DD40E5C0DF8222D3FE3B432CD6F0F97C7168CF0A2E7911157DDFA94986D21ABC9B6",
                   "E8B40937A59BA0EF9D99D002CF4E73901228C587137C053BAB1887794154E8DD",
                   "ED9EBDB7044D861CDA9A9C0919060D9D697B4BCB8E5316724ACD015FEE346AB9",
                   "1")]
        [TestCase("1131A0939A911173",
                   "3",
                   "5BB358688DB05D1",
                   "0")]
        [TestCase("ABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEF0000000000000000000000",
                   "ABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEFABCDEF0000000000000000000000",
                   "1",
                   "0")]
        [TestCase("2",
                   "2",
                   "1",
                   "0")]
        [TestCase("2",
                   "1",
                   "2",
                   "0")]
        public void TestLongDiv(string hex1, string hex2, string expected_hex3, string expected_hex4)
        {
            var a = new BigNum(hex1);
            var b = new BigNum(hex2);

            Operation calculator = new Operation();
            var result = calculator.LongDiv(a, b);
            Assert.AreEqual(expected_hex3, result[0].ToString());
            Assert.AreEqual(expected_hex4, result[1].ToString());
        }


        [Test]
        [Description("Verifies that Gorner function works correctly.")]
        [TestCase("2", "0", "1")]
        [TestCase("2", "1", "2")]
        [TestCase("2", "3", "8")]
        [TestCase("2", "4", "10")]
        [TestCase("2", "A", "400")]
        [TestCase("FFFFFFFFFFFFFFFFFFFFFFFFF", "0", "1")]
        [TestCase("0", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "0")]
        [TestCase("0", "2", "0")]
        [TestCase("16D4CA8", "81", "47F077521DEA7B5C4CD4386F372D61793C148D2E707929FECFA88A253039BA4DF2E1BBB2EA092CA971416B99387373D3461E217E4717421BB4B1EBF9E7F03E49C4D3C772AF7F9D0C9DAE6C780EC639586992B190A3B985366BCF1DCAF6D80D1A49F1BF8BECCC26FE60F2F442BE1EF46F86580AAECB4DABE31244739193EFABF51DA3C4BDD66DA64602C2C54679F65CC6D7E61F6F14F91A74C929304163C9A50399477675E4CD92A76026EEECD7447B2B9664D0C2FEB79C1F46CAFA4A0CF8115706A028CB59F8B3A13821549D46F7B825FA3CB4A44AC3966EEF6395827F6F424DCFAF0D729CECFBDEE7EC4AA5F6EC4ECC011B788586B4CEDD179493AB425241A1573CF34B3FFD0B4DCDCA9C5366FA8C362DD876FF09900E49E172435F01B31B84209845B868AA3E495B0BEADA8415E1D7C788FC9FBB87561FCBEDB2BC7E47F086FDBF9840369FB384B24B66B90BE27968928A56ABD71C1FEF5863CA8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
        [TestCase("4B", "21", "2EE23EFAD9F31E4D2F24BFABDF6BEFA129ABDCF8C0116B93E4CB")]
        [TestCase
        public void TestGorner(string hex1, string hex2, string hex3)
        {
            var a = new BigNum(hex1);
            var b = new BigNum(hex2);
            Operation calculator = new Operation();
            var c = calculator.LongPowerWindow(a, b);
            Assert.AreEqual(hex3, c.ToString());
        }
    }
}